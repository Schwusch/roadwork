{"version":3,"sources":["state/StateContext.js","api/roadwork-api.js","components/Roadworks/RoadworkItem.js","components/Roadworks/Roadworks.js","components/ApiKeyInput/ApiKeyInput.js","components/App/App.js","serviceWorker.js","index.js"],"names":["StateContext","React","createContext","apiKey","clicked","roadworks","setContext","apiUrl","getNestedObject","nestedObj","pathArr","reduce","obj","key","undefined","gMapsUrl","RoadworkItem","props","deviation","_useContext","useContext","geometry","match","react_default","a","createElement","className","style","borderColor","Id","href","concat","target","rel","onClick","updClicked","Object","objectSpread","Message","Roadworks","Consumer","_ref","marginBottom","map","roadwork","Roadworks_RoadworkItem","values","item","ApiKeyInput","_useState","useState","_useState2","slicedToArray","input","setInput","value","onChange","e","disabled","length","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newState","setState","initialState","state","fetchRoadworks","query","fetch","method","mode","cache","headers","Content-Type","body","then","response","json","data","Storage","savedState","JSON","parse","localStorage","error","stringify","comp","_this2","components_Roadworks_Roadworks","ApiKeyInput_ApiKeyInput","Provider","Component","Boolean","window","location","hostname","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42688bbb.chunk.js","sourcesContent":["import React from 'react';\n\nexport const StateContext = React.createContext({\n  apiKey: '',\n  clicked: {},\n  roadworks: [],\n  setContext: () => {}\n});\n","const apiUrl = 'https://api.trafikinfo.trafikverket.se/v2/data.json';\n\nexport const getNestedObject = (nestedObj, pathArr) => {\n  return pathArr.reduce(\n    (obj, key) => (obj && obj[key] !== 'undefined' ? obj[key] : undefined),\n    nestedObj\n  );\n};\n\nexport function fetchRoadworks(apiKey) {\n  const query = `<REQUEST>\n    <LOGIN authenticationkey=\"${apiKey}\" />\n    <QUERY objecttype=\"Situation\" schemaversion=\"1.2\" limit=\"10\">\n    <FILTER>\n        <ELEMENTMATCH>\n            <EQ name=\"Deviation.MessageType\" value=\"Vägarbete\" />\n        </ELEMENTMATCH>\n    </FILTER>\n    <INCLUDE>Deviation.Id</INCLUDE>\n    <INCLUDE>Deviation.Message</INCLUDE>\n    <INCLUDE>Deviation.Geometry.WGS84</INCLUDE>\n    </QUERY>\n  </REQUEST>`;\n\n  return fetch(apiUrl, {\n    method: 'POST',\n    mode: 'cors',\n    cache: 'no-cache',\n    headers: {\n      'Content-Type': 'text/xml'\n    },\n    body: query\n  })\n    .then(response => response.json())\n    .then(data =>\n      getNestedObject(data, ['RESPONSE', 'RESULT', 0, 'Situation'])\n    );\n}\n","import { getNestedObject } from '../../api/roadwork-api.js';\nimport { StateContext } from '../../state/StateContext.js';\nimport React, { useContext } from 'react';\nimport './Roadworks.css';\n\nconst gMapsUrl = 'https://www.google.com/maps/search/?api=1&query=';\n\nfunction RoadworkItem(props) {\n  const { deviation } = props;\n  const { setContext, clicked } = useContext(StateContext);\n\n  let geometry = getNestedObject(deviation, ['Geometry', 'WGS84']);\n  if (geometry) {\n    const re = /\\d+\\.\\d+/g;\n    geometry = geometry.match(re);\n  }\n  return (\n    <div\n      className=\"row\"\n      style={{ borderColor: clicked[deviation.Id] ? 'lightgreen' : 'grey' }}\n    >\n      <a\n        href={`${gMapsUrl}${geometry[1]},${geometry[0]}`}\n        className=\"App-link\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        onClick={() => {\n          const updClicked = { ...clicked };\n          updClicked[deviation.Id] = deviation;\n          setContext({ clicked: updClicked });\n        }}\n      >\n        {deviation.Message}\n      </a>\n    </div>\n  );\n}\n\nexport default RoadworkItem;\n","import React from 'react';\nimport { StateContext } from '../../state/StateContext.js';\nimport { getNestedObject } from '../../api/roadwork-api.js';\nimport RoadworkItem from './RoadworkItem.js';\nimport './Roadworks.css';\n\nfunction Roadworks(props) {\n  return (\n    <StateContext.Consumer>\n      {({ clicked, roadworks }) => {\n        if (roadworks) {\n          return (\n            <div className=\"row\" style={{ marginBottom: 10 }}>\n              <div className=\"column\">\n                <h2>Vägarbeten</h2>\n                {roadworks.map(roadwork => {\n                  const deviation = getNestedObject(roadwork, ['Deviation', 0]);\n                  return (\n                    <RoadworkItem deviation={deviation} key={deviation.Id} />\n                  );\n                })}\n              </div>\n              <div className=\"column\">\n                <h2>Du har klickat på:</h2>\n                {Object.values(clicked).map(item => {\n                  return <RoadworkItem deviation={item} key={item.Id} />;\n                })}\n              </div>\n            </div>\n          );\n        } else {\n          return <p>Ingen data</p>;\n        }\n      }}\n    </StateContext.Consumer>\n  );\n}\n\nexport default Roadworks;\n","import React, { useState } from 'react';\nimport { StateContext } from '../../state/StateContext.js';\n\nfunction ApiKeyInput() {\n  const [input, setInput] = useState('');\n  return (\n    <div>\n      <label>\n        Skriv in din <code>api</code>-nyckel du fått från Vägverket{' '}\n      </label>\n      <input value={input} onChange={e => setInput(e.target.value)} />\n      <StateContext.Consumer>\n        {({ setContext }) => (\n          <button\n            onClick={() => setContext({ apiKey: input })}\n            disabled={input.length !== 32}\n          >\n            OK\n          </button>\n        )}\n      </StateContext.Consumer>\n    </div>\n  );\n}\nexport default ApiKeyInput;\n","import React from 'react';\nimport './App.css';\nimport Roadworks from '../Roadworks/Roadworks.js';\nimport ApiKeyInput from '../ApiKeyInput/ApiKeyInput.js';\nimport { StateContext } from '../../state/StateContext.js';\nimport { fetchRoadworks } from '../../api/roadwork-api.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setContext = newState => this.setState(newState);\n    this.initialState = {\n      apiKey: '',\n      clicked: {},\n      roadworks: [],\n      setContext: this.setContext\n    };\n    this.state = this.initialState;\n    this.fetchRoadworks = () => {\n      if (this.state.apiKey.length === 32) {\n        fetchRoadworks(this.state.apiKey).then(data =>\n          this.setState({ roadworks: data })\n        );\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (typeof Storage !== 'undefined') {\n      let savedState = null;\n      try {\n        savedState = JSON.parse(localStorage.state);\n      } catch (error) {}\n      this.setState(savedState || this.state, this.fetchRoadworks);\n    }\n  }\n\n  componentDidUpdate() {\n    if (typeof Storage !== 'undefined') {\n      localStorage.state = JSON.stringify(this.state);\n    }\n    if (this.state.roadworks.length === 0) {\n      this.fetchRoadworks();\n    }\n  }\n\n  render() {\n    let comp;\n    if (this.state.apiKey && this.state.apiKey.length === 32) {\n      comp = (\n        <div>\n          <Roadworks />\n          <h5\n            onClick={() => {\n              this.setState(this.initialState);\n            }}\n          >\n            reset\n          </h5>\n        </div>\n      );\n    } else {\n      comp = <ApiKeyInput />;\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <StateContext.Provider value={this.state}>\n            {comp}\n          </StateContext.Provider>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}